// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Employee {
  id                 Int       @id @default(autoincrement())
  name               String    @db.VarChar(50)
  photo              String?   @db.VarChar(100)
  gender             String    @db.VarChar(10)
  dateOfBirth        DateTime  @map("date_of_birth") @db.Date
  maritalStatus      String    @map("marital_status") @db.VarChar(15)
  documentType       String    @map("document_type") @db.VarChar(30)
  documentNumber     String    @map("document_number") @db.VarChar(30)
  nif                String?   @unique @db.VarChar(20)
  socialSecurity     String?   @unique @map("social_security") @db.VarChar(20)
  dependents         Int       @default(0)
  educationDegree    String    @map("education_degree") @db.VarChar(50)
  phone1             String    @db.VarChar(15)
  phone2             String?   @db.VarChar(15)
  email              String    @unique @db.VarChar(50)
  userName           String?   @map("user_name") @db.VarChar(64)
  password           String?   @db.VarChar(64)
  canLogin           Boolean   @default(false) @map("can_login")
  countryId          Int       @map("country_id")
  provinceId         Int?      @map("province_id")
  municipalityId     Int?      @map("municipality_id")
  residentialAddress String    @map("residential_address") @db.VarChar(150)
  position           String    @db.VarChar(50)
  baseSalary         Float?    @map("base_salary")
  hireDate           DateTime  @map("hire_date") @db.Date
  contractEndDate    DateTime? @map("contract_end_date") @db.Date
  bankName           String?   @map("bank_name") @db.VarChar(30)
  iban               String?   @unique @db.VarChar(30)
  accountNumber      String?   @map("account_number") @db.VarChar(30)
  createdById        Int?      @map("created_by_id")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedById        Int?      @map("updated_by_id")
  updatedAt          DateTime? @map("updated_at")

  country      Country       @relation(fields: [countryId], references: [id])
  province     Province?     @relation(fields: [provinceId], references: [id])
  municipality Municipality? @relation(fields: [municipalityId], references: [id])
  purchases    Purchase[]
  Sale         Sale[]

  @@unique([documentType, documentNumber])
  @@unique([bankName, accountNumber])
  @@map("tb_employees")
}

model Country {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(20)

  provinces Province[]
  employees Employee[]
  suppliers Supplier[]
  Customer  Customer[]

  @@map("tb_countries")
}

model Province {
  id        Int    @id @default(autoincrement())
  name      String @db.VarChar(50)
  countryId Int    @map("country_id")

  country        Country        @relation(fields: [countryId], references: [id])
  municipalities Municipality[]
  employees      Employee[]
  suppliers      Supplier[]
  Customer       Customer[]

  @@unique([name, countryId])
  @@map("tb_provinces")
}

model Municipality {
  id         Int    @id @default(autoincrement())
  name       String @db.VarChar(50)
  provinceId Int    @map("province_id")

  provice   Province   @relation(fields: [provinceId], references: [id])
  employees Employee[]
  Customer  Customer[]

  @@unique([name, provinceId])
  @@map("tb_municipalities")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(50)
  createdById Int?      @map("created_by_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedById Int?      @map("updated_by_id")
  updatedAt   DateTime? @map("updated_at")

  products         Product[]
  purchases        Purchase[]
  supplierProducts SupplierProduct[]

  @@map("tb_categories")
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(70)
  barCode     String?   @unique @map("bar_code") @db.VarChar(70)
  photo       String?   @db.VarChar(100)
  categoryId  Int       @map("category_id")
  price       Float
  createdById Int?      @map("created_by_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedById Int?      @map("updated_by_id")
  updatedAt   DateTime? @map("updated_at")

  category         Category          @relation(fields: [categoryId], references: [id])
  purchases        Purchase[]
  supplierProducts SupplierProduct[]

  @@unique([name, categoryId])
  @@map("tb_products")
}

model Supplier {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(50)
  representative  String    @db.VarChar(50)
  email           String    @unique @db.VarChar(50)
  phone           String    @unique @db.VarChar(15)
  photo           String?   @db.VarChar(100)
  countryId       Int       @map("country_id")
  provinceId      Int?      @map("province_id")
  municipalityId  Int?      @map("municipality_id")
  businessAddress String    @map("business_address") @db.VarChar(150)
  createdById     Int?      @map("created_by_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedById     Int?      @map("updated_by_id")
  updatedAt       DateTime? @map("updated_at")

  country          Country           @relation(fields: [countryId], references: [id])
  province         Province?         @relation(fields: [provinceId], references: [id])
  supplierProducts SupplierProduct[]
  purchases        Purchase[]

  @@map("tb_suppliers")
}

model SupplierProduct {
  id          Int       @id @default(autoincrement())
  supplierId  Int
  categoryId  Int       @map("category_id")
  productId   Int       @map("product_id")
  unitPrice   Float     @map("unit_price")
  createdById Int?      @map("created_by_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedById Int?      @map("updated_by_id")
  updatedAt   DateTime? @map("updated_at")

  supplier Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([supplierId, categoryId, productId])
  @@map("tb_supplier_products")
}

model Customer {
  id                 Int       @id @default(autoincrement())
  name               String    @db.VarChar(50)
  photo              String?   @db.VarChar(100)
  gender             String    @db.VarChar(10)
  dateOfBirth        DateTime? @map("date_of_birth") @db.Date
  phone              String?   @db.VarChar(15)
  email              String?   @unique @db.VarChar(50)
  countryId          Int       @map("country_id")
  provinceId         Int?      @map("province_id")
  municipalityId     Int?      @map("municipality_id")
  residentialAddress String    @map("residential_address") @db.VarChar(150)
  createdById        Int?      @map("created_by_id")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedById        Int?      @map("updated_by_id")
  updatedAt          DateTime? @map("updated_at")

  country      Country       @relation(fields: [countryId], references: [id])
  province     Province?     @relation(fields: [provinceId], references: [id])
  municipality Municipality? @relation(fields: [municipalityId], references: [id])
  purchases    Purchase[]
  Sale         Sale[]

  @@map("tb_customers")
}

model Purchase {
  id               Int       @id @default(autoincrement())
  photo            String?   @db.VarChar(100)
  supplierId       Int       @map("supplier_id")
  categoryId       Int       @map("category_id")
  productId        Int       @map("product_id")
  color            String    @db.VarChar(20)
  size             String    @db.VarChar(20)
  unitPrice        Float     @map("unit_price")
  quantity         Int
  totalValue       Float     @map("total_value")
  paymentMethod    String    @map("payment_method")
  sellingPriceUnit Float     @default(0) @map("selling_price_unit")
  paid             Boolean
  purchaseDate     DateTime  @map("purchase_date") @db.Date()
  dueDate          DateTime? @map("due_date") @db.Date()
  employeeId       Int?      @map("employee_id")
  createdById      Int?      @map("created_by_id")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedById      Int?      @map("updated_by_id")
  updatedAt        DateTime? @map("updated_at")

  supplier   Supplier  @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  sales      Sale[]
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId Int?

  @@map("tb_purchases")
}

model Sale {
  id            Int       @id @default(autoincrement())
  purchaseId    Int       @map("purchase_id")
  customerId    Int?      @map("customer_id")
  quantity      Int
  totalValue    Float     @map("total_value")
  unitPrice     Float     @map("unit_price")
  amountPaid    Float     @default(0) @map("amount_paid")
  color         String?   @db.VarChar(15)
  size          String?   @db.VarChar(20)
  discount      Float     @map("discount")
  paymentMethod String    @map("payment_method") @db.VarChar(50)
  employeeId    Int       @map("employee_id")
  createdById   Int?      @map("created_by_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedById   Int?      @map("updated_by_id")
  updatedAt     DateTime? @map("updated_at")

  purchase Purchase  @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  customer Customer? @relation(fields: [customerId], references: [id])
  employee Employee  @relation(fields: [employeeId], references: [id])

  @@map("tb_sales")
}

model Notification {
  id           Int       @id @default(autoincrement())
  notifiable   String    @db.VarChar(30)
  notifiableId Int       @map("notifiable_id")
  text         String
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedById  Int?      @map("updated_by_id")
  updatedAt    DateTime? @map("updated_at")
}
